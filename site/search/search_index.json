{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8e\u6211\u4eec So Proficient \uff0c\u6765\u81ea\u5317\u4eac\u7406\u5de5\u5927\u5b66\uff0c\u961f\u5458\u6709 Durant_Lee \u3001 SkqLiiiao \u548c vandoor \uff08Codeforces ID\u5b57\u5178\u5e8f\u5347\u5e8f\u6392\u5217\uff09\u3002 \u672cWiki\u4e3b\u8981\u8bb0\u5f55\u5e73\u65f6vp\u4ee5\u53caCodeforces/AtCoder\u7b49\u6bd4\u8d5b\u7684\u90e8\u5206\u9898\u7684\u9898\u89e3\uff0c\u66f4\u65b0\u9891\u7387\u548c\u8bed\u8a00\u98ce\u683c\u4e0d\u5b9a\u3002 \u66f4\u65b0\u8bb0\u5f55 \u6bd4\u8d5b\u540d\u79f0 \u66f4\u65b0\u65e5\u671f \u662f\u5426\u5b8c\u6210 AtCoder Beginner Contest 241 2022-04-11 AtCoder Beginner Contest 242 2022-04-11 AtCoder Beginner Contest 243 2022-04-11 AtCoder Beginner Contest 244 2022-04-11 AtCoder Beginner Contest 245 2022-04-11 AtCoder Beginner Contest 247 2022-04-11 2022 \u6b66\u6c49\u5927\u5b66\u65b0\u751f\u8d5b 2022-04-11 AtCoder Beginner Contest 235 2022-04-12","title":"Home"},{"location":"#_1","text":"So Proficient \uff0c\u6765\u81ea\u5317\u4eac\u7406\u5de5\u5927\u5b66\uff0c\u961f\u5458\u6709 Durant_Lee \u3001 SkqLiiiao \u548c vandoor \uff08Codeforces ID\u5b57\u5178\u5e8f\u5347\u5e8f\u6392\u5217\uff09\u3002 \u672cWiki\u4e3b\u8981\u8bb0\u5f55\u5e73\u65f6vp\u4ee5\u53caCodeforces/AtCoder\u7b49\u6bd4\u8d5b\u7684\u90e8\u5206\u9898\u7684\u9898\u89e3\uff0c\u66f4\u65b0\u9891\u7387\u548c\u8bed\u8a00\u98ce\u683c\u4e0d\u5b9a\u3002","title":"\u5173\u4e8e\u6211\u4eec"},{"location":"#_2","text":"\u6bd4\u8d5b\u540d\u79f0 \u66f4\u65b0\u65e5\u671f \u662f\u5426\u5b8c\u6210 AtCoder Beginner Contest 241 2022-04-11 AtCoder Beginner Contest 242 2022-04-11 AtCoder Beginner Contest 243 2022-04-11 AtCoder Beginner Contest 244 2022-04-11 AtCoder Beginner Contest 245 2022-04-11 AtCoder Beginner Contest 247 2022-04-11 2022 \u6b66\u6c49\u5927\u5b66\u65b0\u751f\u8d5b 2022-04-11 AtCoder Beginner Contest 235 2022-04-12","title":"\u66f4\u65b0\u8bb0\u5f55"},{"location":"codeforces/","text":"","title":"Codeforces"},{"location":"vp/","text":"","title":"VP"},{"location":"atcoder/abc/abc235/","text":"F - Variety of Digits \u7ed9\u5b9a\u6570\u5b57\u96c6\u5408 \\(M\\) \uff0c\u6c42 \\(1\\sim N\\) \u4e2d\u6ee1\u8db3\u6570\u4f4d\u96c6\u5408\u5305\u542b \\(M\\) \u7684\u6570\u7684\u548c\uff0c\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \u4f8b\u5982 \\(M=\\{1,2\\}\\) \uff0c \\(x=123\\) \uff0c\u5219 \\(x\\) \u7684\u6570\u4f4d\u96c6\u5408\u4e3a \\(\\{1,2,3\\}\\) \u5305\u542b \\(\\{1,2\\}\\) \uff0c\u56e0\u6b64\u7b26\u5408\u6761\u4ef6\u3002 \\(N\\leq 10^{10^4}\\) \u6570\u4f4dDP\uff0c\u8bb0\u72b6\u6001 \\(f(n,k,zero,limit)\\) \u548c \\(g(n,k,zero,limit)\\) \u3002 \\(n\\) \u8868\u793a\u5f53\u524d\u586b\u5199\u7b2c \\(n\\) \u4f4d \\(k\\) \u8868\u793a\u5f53\u524d\u6570\u4f4d\u96c6\u5408\u4e0e \\(M\\) \u7684\u5dee\u96c6\u4e3a \\(k\\) \uff08\u5373\u8fd8\u6709\u54ea\u4e9b\u9700\u8981\u51fa\u73b0\u7684\u6570\u6ca1\u51fa\u73b0\uff09 \\(zero\\) \u8868\u793a\u5f53\u524d\u4f4d\u662f\u5426\u4e3a\u6700\u9ad8\u4f4d\uff08\u82e5\u524d\u9762\u4e00\u76f4\u586b \\(0\\) \uff0c\u5219\u5f53\u524d\u4f4d\u662f\u6700\u9ad8\u4f4d\uff0c\u8fd9\u4f1a\u51b3\u5b9a\u5982\u679c\u5f53\u524d\u4f4d\u586b \\(0\\) \u662f\u5426\u4f1a\u88ab\u8ba1\u5165\u6570\u4f4d\u96c6\u5408\u4e2d\uff09 \\(limit\\) \u8868\u793a\u5f53\u524d\u662f\u5426\u5361\u7740\u4e0a\u9650\uff08\u5373\u66f4\u9ad8\u4f4d\u662f\u5426\u4e0e \\(N\\) \u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u5f71\u54cd\u7740\u5f53\u524d\u4f4d\u7684\u53d6\u503c\u8303\u56f4\uff09 \\(f\\) \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u4e4b\u548c\uff0c \\(g\\) \u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\u3002 \u4e0d\u96be\u53d1\u73b0\u603b\u72b6\u6001\u6570\u4e3a \\(\\lceil{\\log_{10}}{N}\\rceil\\times 2^{10}\\times 2\\times 2\\leq 5\\times 10^7\\) \u3002 \u5f85\u6c42\u7b54\u6848\u4e3a \\(f(\\lceil{\\log_{10}}{N}\\rceil,M,1,1)\\) \u3002 \u8fb9\u754c\u6761\u4ef6\u4e3a\u5f53 \\(|k|>n+1\\) \u65f6 \\((f,g)=(0,0)\\) \uff1b \\(n=-1\\) \u65f6\uff0c \\((f,g)=(0,1)\\) \u3002 \u679a\u4e3e\u5f53\u524d\u586b\u7684\u6570 \\(x\\) \uff0c\u4ece \\(0\\) \u5f00\u59cb\uff0c\u5982\u679c \\(limit=1\\) \uff0c\u5219\u4e0a\u9650\u4e3a \\(N[n]\\) \uff0c\u5426\u5219\u4e0a\u9650\u4e3a \\(9\\) \u3002 \u5219\u65b0\u7684 \\(k'\\) \u4e3a\u5f53\u524d \\(k\\) \u9664\u53bb \\(x\\) \u3002 \u5219\u5f53\u524d\u4f4d\u7684\u8d21\u732e\u4e3a \\(\\sum\\limits_{x=0}^{9/N[n]}{10^n\\times x\\times g(n-1,\\cdots)}\\) \uff0c\u81f3\u4e8e \\(zero\\) \u548c \\(limit\\) \u7684\u53d8\u5316\u5e94\u8be5\u5f88\u663e\u7136\uff0c\u5728\u6b64\u4e0d\u518d\u8d58\u8ff0\u3002 #include <bits/stdc++.h> using namespace std ; const int MOD = 998244353 ; using ll = long long ; struct mint { int n ; mint () : n ( 0 ) { ; } mint ( ll m ) { if ( m < 0 || MOD <= m ) { m %= MOD ; if ( m < 0 ) m += MOD ; } n = m ; } operator int () { return n ; } }; bool operator == ( mint a , mint b ) { return a . n == b . n ; } mint operator += ( mint & a , mint b ) { a . n += b . n ; if ( a . n >= MOD ) a . n -= MOD ; return a ; } mint operator -= ( mint & a , mint b ) { a . n -= b . n ; if ( a . n < 0 ) a . n += MOD ; return a ; } mint operator *= ( mint & a , mint b ) { a . n = (( ll ) a . n * b . n ) % MOD ; return a ; } mint operator + ( mint a , mint b ) { return a += b ; } mint operator - ( mint a , mint b ) { return a -= b ; } mint operator * ( mint a , mint b ) { return a *= b ; } mint operator ^ ( mint a , int n ) { if ( n == 0 ) return mint ( 1 ); mint res = ( a * a ) ^ ( n / 2 ); if ( n % 2 ) res = res * a ; return res ; } ll inv ( ll a , ll p ) { return ( a == 1 ? 1 : ( 1 - p * inv ( p % a , a )) / a + p ); } mint operator / ( mint a , mint b ) { return a * mint ( inv ( b , MOD )); } mint operator /= ( mint & a , mint b ) { a = a / b ; return a ; } int main () { string s ; cin >> s ; vector < mint > ten ; vector < int > lim ; for ( int i = s . size () - 1 ; i >= 0 ; -- i ) lim . push_back ( s [ i ] - '0' ); ten . push_back ( 1 ); for ( int i = 1 ; i < s . size (); ++ i ) ten . push_back ( ten . back () * mint ( 10 )); int m ; cin >> m ; int k = 0 ; for ( int i = 0 , x ; i < m ; ++ i ) { cin >> x ; k |= 1 << x ; } array < mint , 2 > mp [ 2 ][ 2 ][ 10005 ][ 1024 ]; function < array < mint , 2 > ( int , int , int , int ) > dfs = [ & ]( int n , int k , int f , int zero ) -> array < mint , 2 > { // n\u4f4d\uff0c\u6700\u9ad8\u4f4d\u4e3alimit\uff0c\u96c6\u5408\u60c5\u51b5\u4e3ak\uff0c\u5f53\u524d\u662f\u5426\u4e3a\u6700\u9ad8\u4f4d if ( __builtin_popcount ( k ) > n + 1 ) return { 0 , 0 }; if ( n == -1 ) return { 0 , 1 }; if ( mp [ f ][ zero ][ n ][ k ][ 0 ]) return mp [ f ][ zero ][ n ][ k ]; int limit = f ? lim [ n ] : 10 ; mint sum = 0 , cnt = 0 ; for ( int i = 0 ; i < limit ; ++ i ) { if ( zero && i == 0 ) { auto [ s , c ] = dfs ( n - 1 , k , 0 , 1 ); cnt += c ; sum += s + mint ( i ) * ten [ n ] * c ; } else { auto [ s , c ] = dfs ( n - 1 , k & ~ ( 1 << i ), 0 , 0 ); cnt += c ; sum += s + mint ( i ) * ten [ n ] * c ; } } if ( f ) { auto [ s , c ] = dfs ( n - 1 , k & ~ ( 1 << limit ), 1 , 0 ); cnt += c ; sum += s + mint ( limit ) * ten [ n ] * c ; } return mp [ f ][ zero ][ n ][ k ] = array < mint , 2 > { sum , cnt }; }; cout << dfs ( s . size () - 1 , k , 1 , 1 )[ 0 ] << endl ; return 0 ; }","title":"AtCoder Beginner Contest 235"},{"location":"atcoder/abc/abc241/","text":"G - Round Robin \\(n\\) \u4e2a\u4eba\uff0c\u4efb\u610f\u4e24\u4eba\u4e4b\u95f4\u90fd\u6709\u4e00\u573a\u6bd4\u8d5b\uff0c\u4e00\u5171 \\(\\frac{n\\times(n-1)}{2}\\) \u573a\u3002\u6bd4\u8d5b\u53ea\u6709\u80dc\u8d1f\uff0c\u6ca1\u6709\u5e73\u5c40\u3002 \u5df2\u77e5 \\(m\\) \u5c40\u6bd4\u8d5b\u7684\u80dc\u8d1f\uff0c\u95ee\u5982\u679c\u81ea\u7531\u5b89\u6392\u5269\u4e0b\u6bd4\u8d5b\u7684\u80dc\u8d1f\uff0c\u54ea\u4e9b\u9009\u624b\u53ef\u80fd\u593a\u51a0\uff1f\uff08\u5373\u80dc\u7684\u573a\u6570\u5927\u4e8e\u5176\u4ed6\u6240\u6709\u4eba\uff09 \\(n\\leq 50\\) \u82e5\u60f3\u8981\u8ba9 \\(x\\) \u593a\u51a0\uff0c\u5219\u4f1a\u5c06\u4ed6\u5728\u6240\u6709\u672a\u5b8c\u6210\u7684\u6bd4\u8d5b\u4e2d\u83b7\u80dc\uff0c\u6b64\u65f6\u53ef\u4ee5\u7edf\u8ba1\u51fa\u4ed6\u7684\u603b\u80dc\u573a \\(w[x]\\) \u3002 \u82e5 \\(x\\) \u80fd\u6210\u529f\u593a\u51a0\uff0c\u5f53\u4e14\u4ec5\u5f53\u5269\u4e0b\u7684\u6bd4\u8d5b\u5b58\u5728\u4e00\u79cd\u80dc\u8d1f\u65b9\u6848\uff0c\u4f7f\u5f97\u5176\u4ed6\u4eba\u7684\u80dc\u573a\u90fd\u5c0f\u4e8e \\(w[x]\\) \u3002 \u8003\u8651\u6700\u5927\u6d41\u6a21\u578b\u3002 \u539f\u7406\u662f\uff0c\u7531\u4e8e\u6bcf\u573a\u6bd4\u8d5b\u90fd\u6709\u80dc\u8005\uff0c\u6ca1\u6709\u5e73\u5c40\u3002\u56e0\u6b64\u5c06\u6e90\u70b9\u4e0e\u5b83\u4eec\u8fde\u8fb9\uff0c\u6d41\u91cf\u9650\u5236\u4e3a \\(1\\) \uff08\u8868\u793a\u6709\u4e00\u4e2a\u80dc\u8005\u9700\u8981\u5206\u914d\uff09\uff0c\u7136\u540e\u5c06\u6bcf\u573a\u6bd4\u8d5b\u5411\u53ef\u80fd\u6210\u4e3a\u80dc\u8005\u7684\u70b9\u8fde\u8fb9\u3002\u901a\u8fc7\u8bbe\u7f6e\u6bcf\u4e2a\u4eba\u5230\u6c47\u70b9\u7684\u6d41\u91cf\u9650\u5236\uff0c\u6765\u9650\u5236\u6bcf\u4e2a\u70b9\u80dc\u573a\u7684\u4e0a\u9650\uff08\u9664\u4e86\u593a\u51a0\u8005\u7684\u5176\u4ed6\u4eba\u7684\u83b7\u80dc\u573a\u6570\u4e0d\u80fd\u8d85\u8fc7 \\(w[x]-1\\) \uff09\u3002\u6700\u7ec8\u53ef\u4ee5\u901a\u8fc7\u6700\u5927\u6d41\u662f\u5426\u4e3a\u6bd4\u8d5b\u573a\u6570\u6765\u5224\u65ad\u80fd\u5426\u5206\u914d\u6240\u6709\u6bd4\u8d5b\u7684\u80dc\u8d1f\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u9664\u4e86\u6e90\u70b9 \\(s\\) \uff0c\u6c47\u70b9 \\(t\\) \u4e4b\u5916\uff0c\u8fd8\u6709\u70b9 \\(A_{i,j}(1\\leq i<j\\leq n)\\) \u548c \\(B_i(1\\leq i\\leq n)\\) \u3002 \\(s\\) \u5411 \\(A_{i,j}\\) \u8fde\u6d41\u91cf\u9650\u5236\u4e3a \\(1\\) \u7684\u8fb9\u3002 \\(A_{i,j}\\) \u8868\u793a \\(i\\) \u548c \\(j\\) \u4e4b\u95f4\u7684\u6bd4\u8d5b\uff0c\u82e5 \\(i\\) \u83b7\u80dc\uff0c\u8fde\u63a5 \\((A_{i,j},B_i)\\) \uff0c\u82e5 \\(j\\) \u83b7\u80dc\uff0c\u8fde\u63a5 \\((A_{i,j},B_j)\\) \uff0c\u82e5\u5c1a\u672a\u51b3\u51fa\u80dc\u8d1f\uff0c\u5219\u540c\u65f6\u5411 \\(B_i,B_j\\) \u8fde\u8fb9\u3002\u8fb9\u7684\u6d41\u91cf\u9650\u5236\u90fd\u662f \\(1\\) \u3002 \\(B_x\\) \u5411 \\(t\\) \u8fde\u63a5\u6d41\u91cf\u4e3a \\(w[x]\\) \u7684\u8fb9\uff0c\u5176\u4ed6 \\(B_i\\) \u5411 \\(t\\) \u8fde\u63a5\u6d41\u91cf\u4e3a \\(w[x] - 1\\) \u7684\u8fb9\u3002 \u82e5\u6700\u5927\u6d41\u4e3a \\(\\frac{n\\times(n-1)}{2}\\) \uff0c\u5219\u8bf4\u660e \\(x\\) \u53ef\u4ee5\u593a\u51a0\u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(x\\) \u90fd\u91cd\u65b0\u5efa\u56fe\u8dd1\u6700\u5927\u6d41\uff0c\u590d\u6742\u5ea6 \\(O(n^4)\\) \u3002","title":"AtCoder Beginner Contest 241"},{"location":"atcoder/abc/abc242/","text":"F - Black and White Rooks \u5728 \\(n\\times m\\) \u7684\u7f51\u683c\u56fe\u4e0a\u653e\u7f6e \\(a\\) \u4e2a\u767d\u68cb\u548c \\(b\\) \u4e2a\u9ed1\u68cb\uff0c\u6bcf\u4e2a\u683c\u5b50\u6700\u591a\u653e\u7f6e\u4e00\u4e2a\u68cb\u5b50\uff0c\u4e14\u540c\u4e00\u884c/\u540c\u4e00\u5217\u4e2d\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u9ed1\u767d\u68cb\u5b50\u3002\u6c42\u6709\u591a\u5c11\u79cd\u559d\u6cd5\u7684\u653e\u7f6e\u65b9\u6848\u3002 \\(n,m\\leq 50\\) \u5206\u522b\u679a\u4e3e\u767d\u68cb\u548c\u9ed1\u68cb\u6240\u5360\u7684\u884c\u6570\u548c\u5217\u6570\uff0c\u7136\u540e\u5bb9\u65a5\u539f\u7406\u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002 \\(ans=\\sum\\limits_{i=0}^{n}\\sum\\limits_{j=0}^{m}\\sum\\limits_{x=0}^{n-i}\\sum\\limits_{y=0}^{m-j}\\binom{i}{n}\\binom{j}{m}\\binom{x}{n-i}\\binom{y}{m-j}\\binom{a}{ij}\\binom{b}{xy}\\)","title":"AtCoder Beginner Contest 242"},{"location":"atcoder/abc/abc243/","text":"F - Lottery \u4e00\u5171\u6709 \\(n\\) \u4e2a\u5956\u54c1\uff0c\u83b7\u5f97\u7b2c \\(i\\) \u4e2a\u5956\u54c1\u7684\u6982\u7387\u4e3a \\(p_i\\) \uff08 \\(\\sum{p_i}=1\\) \uff09\u3002\u6c42 \\(k\\) \u6b21\u62bd\u5956\u540e\uff0c\u83b7\u5f97\u6070\u597d \\(m\\) \u4e2a\u4e0d\u540c\u5956\u54c1\u7684\u6982\u7387\u3002 \\(k,n,m\\leq 50\\) \u591a\u9879\u5206\u5e03\u7684\u6982\u7387\uff1a \\(P(X_1=c_1,\\cdots,X_N=c_N)=\\frac{K!}{\\prod\\limits_{i=1}^{N}{c_i}}\\times\\prod\\limits_{i=1}^{N}{p_i^{c_i}}\\) \uff0c\u5373\u62bd\u6837 \\(K\\) \u6b21\u83b7\u5f97 \\(N\\) \u79cd\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u5176\u4e2d \\(X_i\\) \u51fa\u73b0 \\(c_i\\) \u6b21\u7684\u6982\u7387\u3002 \u5219 \\(f[x][y][z]\\) \u8868\u793a\u7ecf\u8fc7 \\(z\\) \u6b21\u62bd\u5956\uff0c\u5728\u524d \\(i\\) \u79cd\u5956\u54c1\u4e2d\u62bd\u4e2d \\(y\\) \u79cd\u4e0d\u540c\u5956\u54c1\u7684\u6982\u7387\u3002 \u679a\u4e3e\u5f53\u524d\u5956\u54c1\u62bd\u4e2d\u7684\u6b21\u6570\uff0c\u5219 \\(f[x+1][y+[a\\not=0]][z+a]\\leftarrow f[x][y][z]\\times \\frac{p_{x+1}^a}{a!}\\) \u3002 \u7b54\u6848\u4e3a \\(f[n][m][k]\\times k!\\) \u3002 \u590d\u6742\u5ea6 \\(O(nmk^2)\\) \u3002 G - Sqrt \u6709\u4e00\u4e2a\u65e0\u9650\u957f\u7684\u5e8f\u5217\uff0c\u7b2c\u4e00\u9879\u4e3a \\(x\\) \u3002\u6784\u9020\u89c4\u5219\u4e3a\u6bcf\u6b21\u9009\u62e9 \\([1,\\lfloor{\\sqrt{x}}\\rfloor]\\) \u4e2d\u7684\u4e00\u4e2a\u6570\u63d2\u5230\u5e8f\u5217\u672b\u5c3e\u3002\u6c42\u6700\u7ec8\u5f97\u5230\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5e8f\u5217\u3002 \\(x\\leq 9\\times 10^{18}\\) \u5f53\u672b\u5c3e\u4e3a \\(1\\) \u65f6\uff0c\u5e8f\u5217\u7684\u540e\u9762\u5c31\u53ea\u80fd\u65e0\u9650\u63d2\u5165 \\(1\\) \uff0c\u65e0\u6cd5\u518d\u4ea7\u751f\u65b0\u7684\u5e8f\u5217\u3002 \u6839\u636e \\(x\\) \u7684\u8303\u56f4\uff0c\u5e8f\u5217\u7684\u7b2c\u4e09\u4e2a\u6570\u5c06\u4e0d\u4f1a\u8d85\u8fc7 \\(x^{\\frac{1}{4}}<55000\\) \uff0c\u540e\u9762\u7684\u6570\u53d6\u503c\u8303\u56f4\uff0c\u53ef\u53ea\u4f1a\u66f4\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u7b97\u3002 \u8bb0 \\(f_i(x)\\) \u4e3a\u5e8f\u5217\u7b2c \\(i\\) \u4f4d\u4e3a \\(x\\) \u7684\u4e0d\u540c\u5e8f\u5217\u6570\uff0c\u5219 \\(f_{i+1}(a)=\\sum\\limits_{b=a^2}^{x}{f_{i}(b)}\\) \u3002 \u800c \\(f_{3}(a)=\\sum\\limits_{b=a^2}^{x}{f_{2}(b)}=\\lfloor{\\sqrt{x}}\\rfloor-a^2+1\\) \uff0c \\(a\\in[1,\\lfloor{x^{\\frac{1}{4}}}\\rfloor]\\) \u3002","title":"AtCoder Beginner Contest 243"},{"location":"atcoder/abc/abc244/","text":"G - Construct Good Path \u7ed9\u5b9a\u4e00\u5f20\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u8f93\u51fa\u4e00\u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(4n\\) \u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u70b9\u7684\u8bbf\u95ee\u6b21\u6570\u7684\u5947\u5076\u6027\u4e0e\u7ed9\u5b9a\u7684 \\(01\\) \u4e32\u76f8\u540c\u3002 \\(n\\leq 10^5\\) \u60f3\u5728\u4e0d\u6539\u53d8\u8def\u5f84\u7684\u524d\u63d0\u4e0b\u6539\u53d8\u67d0\u4e2a\u70b9 \\(a\\) \u7684\u5947\u5076\u6027\uff0c\u53ea\u9700\u8981\u5c06\u67d0\u6761\u8fb9 \\((a,b)\\) \u6765\u56de\u8d70\u4e09\u904d\u5373\u53ef\uff0c\u5373 \\(a\\rightarrow b\\rightarrow (a\\rightarrow b)\\) \uff08\u867d\u7136\u6b64\u65f6 \\(b\\) \u5947\u5076\u6027\u4e5f\u6539\u53d8\u4e86\uff0c\u4f46\u53ef\u4ee5\u7ee7\u7eed\u901a\u8fc7\u8be5\u65b9\u6cd5\u53cd\u8f6c\u5b83\u7684\u5947\u5076\u6027\uff09\u3002 \u5f97\u5230\u56fe\u7684\u4efb\u610f\u4e00\u68f5\u751f\u6210\u6811\uff0c\u8bb0\u5f55\u5176\u6b27\u62c9\u5e8f\uff0c\u5219\u6bcf\u4e2a\u70b9\u7684\u8bbf\u95ee\u6b21\u6570\u7684\u5947\u5076\u6027\u5df2\u77e5\u3002\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u82e5\u5f53\u524d\u70b9\u7684\u5947\u5076\u6027\u4e0e \\(01\\) \u4e32\u76f8\u5f02\uff0c\u5219\u5728\u8fd4\u56de \\(fa_x\\) \u540e\u518d\u91cd\u590d\u8be5\u8fb9\uff0c\u5373 \\(x\\rightarrow fa_x\\rightarrow (x\\rightarrow fa_x)\\) \uff0c\u6b64\u65f6 \\(x\\) \u4e0e \\(fa_x\\) \u7684\u5947\u5076\u6027\u540c\u65f6\u53cd\u8f6c\u3002\u56de\u5230\u6839\u7ed3\u70b9\u65f6\uff0c\u9664\u6839\u7ed3\u70b9\u5916\u7684\u6240\u6709\u8282\u70b9\u7684\u5947\u5076\u6027\u4e0e\u7ed9\u5b9a \\(01\\) \u4e32\u4e00\u81f4\u3002 \u82e5\u6b64\u65f6\u6839\u7ed3\u70b9\u7684\u5947\u5076\u6027\u4e0e \\(01\\) \u4e32\u76f8\u540c\uff0c\u5219\u5df2\u7ecf\u5f97\u5230\u8981\u6c42\u7684\u8def\u5f84\uff0c\u5426\u5219\u53ea\u9700\u8981\u5728\u5e8f\u5217\u672b\u5c3e\u589e\u52a0 \\(root \\rightarrow \\cdots\\rightarrow root(\\rightarrow v\\rightarrow root\\rightarrow v)\\) \uff0c\u6b64\u65f6 \\(v\\) \u7684\u5947\u5076\u6027\u4e0d\u53d8\uff0c\u800c \\(root\\) \u7684\u5947\u5076\u6027\u6539\u53d8\uff0c\u5219\u6240\u6709\u70b9\u7684\u5947\u5076\u6027\u90fd\u4e0e\u7ed9\u5b9a \\(01\\) \u4e32\u76f8\u540c\u3002 \u6811\u7684\u6b27\u62c9\u5e8f\u7684\u957f\u5ea6\u4e3a\u6240\u6709\u70b9\u7684\u5ea6\u6570\u4e4b\u548c\uff0c\u4e3a \\(2n-1\\) \u3002\u6700\u52a3\u60c5\u51b5\u4e0b\u6240\u6709\u8fb9\u90fd\u88ab\u91cd\u590d\uff0c\u6b64\u65f6\u957f\u5ea6\u4e3a \\(4n-3\\) \uff0c\u518d\u52a0\u4e0a\u672b\u5c3e\u989d\u5916\u589e\u52a0\u7684\u957f\u5ea6\u4e3a \\(3\\) \u7684\u8def\u5f84 \\(\\rightarrow v\\rightarrow root\\rightarrow v\\) \uff0c\u8def\u5f84\u957f\u5ea6\u7684\u6700\u5927\u503c\u6070\u597d\u4e3a \\(4n\\) \u3002","title":"AtCoder Beginner Contest 244"},{"location":"atcoder/abc/abc245/","text":"E - Wrapping Chocolate \u6709 \\(n\\) \u4e2a\u7269\u54c1\uff0c\u5927\u5c0f\u4e3a \\(a_i\\times b_i\\) \u3002\u6709 \\(m\\) \u4e2a\u76d2\u5b50\uff0c\u5927\u5c0f\u4e3a \\(c_i\\times d_i\\) \u3002\u6bcf\u4e2a\u76d2\u5b50\u81f3\u591a\u653e\u4e00\u4ef6\u7269\u54c1\uff0c\u4e14\u4e0d\u80fd\u65cb\u8f6c\u3002\u6c42\u662f\u5426\u80fd\u5c06\u8fd9 \\(n\\) \u4e2a\u7269\u54c1\u5168\u90e8\u653e\u8fdb\u76d2\u5b50\u4e2d\u3002 \\(1\\leq n\\leq m\\leq 2\\times10^5\\) \u672c\u7740\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u663e\u7136\u4f1a\u627e\u5c3d\u53ef\u80fd\u5c0f\u7684\u76d2\u5b50\u6765\u88c5\u7269\u54c1\u3002 \u4f46\u662f\u7531\u4e8e\u7269\u54c1\u7684\u5c3a\u5ea6\u6709\u4e24\u7ef4\uff0c\u56e0\u6b64\u9700\u8981\u4fdd\u6301\u4e00\u7ef4\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\u53d6\u53e6\u4e00\u7ef4\u6700\u5c0f\u7684\u3002 \u5c06 \\((a_i,b_i)\\) \u548c \\((c_i,d_i)\\) \u653e\u5728\u4e00\u8d77\uff0c\u5012\u5e8f\u6392\u5e8f\u3002 \u6b64\u65f6\uff0c\u82e5\u662f\u4e2a\u76d2\u5b50\uff0c\u5c06\u7b2c\u4e8c\u7ef4 \\(d_i\\) \u653e\u8fdb\u76d2\u5b50\u7684\u96c6\u5408\u4e2d\u3002 \u5982\u679c\u662f\u4e2a\u7269\u54c1\u3002\u7531\u4e8e\u7b2c\u4e00\u7ef4\u5df2\u7ecf\u5012\u5e8f\u6392\u5217\uff0c\u56e0\u6b64\u96c6\u5408\u4e2d\u7684\u6240\u6709\u76d2\u5b50\u7684\u7b2c\u4e00\u7ef4\u5747\u6ee1\u8db3\u6761\u4ef6\uff0c\u800c\u6ca1\u6709\u63d2\u5165\u96c6\u5408\u7684\u6240\u6709\u76d2\u5b50\u7684\u7b2c\u4e00\u7ef4\u5747\u4e0d\u7b26\u5408\u6761\u4ef6\u3002\u672c\u7740\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u53d6\u51fa\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(b_i\\) \u7684 \\(d_i\\) \u4e0e\u4e4b\u5339\u914d\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u65e0\u89e3\u3002 \u590d\u6742\u5ea6 \\(O((n+m)\\log(n+m))\\) \u3002","title":"AtCoder Beginner Contest 245"},{"location":"atcoder/abc/abc247/","text":"Ex - Rearranging Problem \\(n\\) \u4e2a\u4eba\uff0c\u7f16\u53f7\u4e3a \\(1\\sim n\\) \u6392\u6210\u4e00\u6392\uff0c\u6bcf\u4e2a\u4eba\u6709\u4e2a\u989c\u8272 \\(c_i\\) \u3002\u73b0\u5728\u4eba\u7684\u4f4d\u7f6e\u4efb\u610f\u4ea4\u6362 \\(K\\) \u6b21\uff0c\u95ee\u6240\u6709\u53ef\u80fd\u5f62\u6210\u7684\u7f16\u53f7\u6392\u5217\u4e2d\u6709\u591a\u5c11\u79cd\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u4e0a\u7684\u4eba\u989c\u8272\u4ecd\u4e3a \\(c_i\\) \u3002 \\(n\\leq 2\\times 10^5\\) \u8fd9\u4e2a\u9898\u9700\u8981\u77e5\u9053\u51e0\u4e2a\u6027\u8d28\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u4efb\u610f\u4e00\u4e2a\u6392\u5217\uff0c\u8fde\u8fb9 \\(i\\rightarrow p_i\\) \uff0c\u5b83\u7f6e\u6362\u6210\u539f\u6392\u5217\u7684\u6700\u5c0f\u6b65\u6570\u5c31\u662f( \\(n-\\) \u73af\u7684\u4e2a\u6570)\u3002 \u6bcf\u6b21\u4ea4\u6362\u4f1a\u4f7f\u5f97\u73af\u7684\u4e2a\u6570 \\(+1/-1\\) \u3002 \u8bc1\u660e\u7565\u3002 \u8003\u8651\u521d\u59cb\u72b6\u6001\u548c\u6700\u7ec8\u72b6\u6001\uff0c\u5b9e\u9645\u4e0a\u5f62\u6210\u7684\u6bcf\u4e2a\u73af\u90fd\u662f\u540c\u8272\u7684\uff0c\u6700\u7ec8\u72b6\u6001\u76f8\u5f53\u4e8e\u4ece\u6bcf\u79cd\u989c\u8272\u9009\u82e5\u5e72\u4e2a\u73af\u3002\u5047\u8bbe\u603b\u5171\u9009\u4e86 \\(c\\) \u4e2a\uff0c\u90a3\u4e48\u5f53 \\(n-c\\leq K\\) \u4e14 \\((K-(n-c))\\equiv 0(\\text{mod}\\ 2)\\) \u65f6\uff0c\u8fd9\u4e2a\u65b9\u6848\u662f\u5408\u6cd5\u7684\u3002 \u6211\u4eec\u5bf9\u6bcf\u79cd\u989c\u8272\u5206\u522b\u6c42\u51fa\u5f62\u6210 \\(1\\sim cnt\\) \u4e2a\u73af\u7684\u65b9\u6848\u6570\uff0c\u7136\u540e\u5377\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u8003\u8651\u73b0\u5728\u67d0\u79cd\u989c\u8272\u6709 \\(n\\) \u4e2a\uff0c\u8981\u5f62\u6210 \\(k\\) \u4e2a\u73af\uff0c\u7b49\u4ef7\u4e8e\u4e2a\u5143\u7d20\u5212\u5206\u6210 \\(k\\) \u4e2a\u975e\u7a7a\u8f6e\u6362\u7684\u65b9\u6848\u6570\uff0c\u4e5f\u5373\u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u591a\u9879\u5f0f\u6c42\u4e00\u4e0b\u3002 \u6700\u540e\u9700\u8981\u5806\u4f18\u5316\u7684\u5408\u5e76\uff0c\u590d\u6742\u5ea6 \\(O(n\\log ^2n)\\) \u6d4b\u8bd5\u4e86\u4e00\u4e0b\u591a\u9879\u5f0f\u677f\u5b50\uff0c\u7528\u8d77\u6765\u8fd8\u53ef\u4ee5\u3002 #include <bits/stdc++.h> #define fi first #define se second #define pb push_back #define mkp make_pair using namespace std ; using vi = vector < int > ; typedef double db ; typedef pair < int , int > pii ; typedef long long ll ; int read (){ int ret = 0 , f = 0 ; char c = getchar (); while ( ! isdigit ( c )){ if ( c == '-' ) f = 1 ; c = getchar ();} while ( isdigit ( c )){ ret = ret * 10 + ( c ^ 48 ); c = getchar ();} return f ?- ret : ret ; } const int N = ( 1 << 20 ) | 100 ; const int p = 998244353 , gg = 3 , ig = 332738118 , img = 86583718 ; const int mod = 998244353 ; int qpow ( int x , int y ){ int ret = 1 ; for (; y ; y >>= 1 , x = 1l l * x * x % mod ) if ( y & 1 ) ret = 1l l * ret * x % mod ; return ret ; } namespace Poly { #define mul(x, y) (1ll * x * y >= mod ? 1ll * x * y % mod : 1ll * x * y) #define minus(x, y) (1ll * x - y < 0 ? 1ll * x - y + mod : 1ll * x - y) #define plus(x, y) (1ll * x + y >= mod ? 1ll * x + y - mod : 1ll * x + y) #define ck(x) (x >= mod ? x - mod : x) //\u53d6\u6a21\u8fd0\u7b97\u592a\u6162\u4e86 typedef vector < int > poly ; const int G = 3 ; //\u6839\u636e\u5177\u4f53\u7684\u6a21\u6570\u800c\u5b9a\uff0c\u539f\u6839\u53ef\u4e0d\u4e00\u5b9a\u4e0d\u4e00\u6837\uff01\uff01\uff01 //\u4e00\u822c\u6a21\u6570\u7684\u539f\u6839\u4e3a 2 3 5 7 10 6 const int inv_G = qpow ( G , mod - 2 ); int RR [ N ], deer [ 2 ][ 19 ][ N ], inv [ N ]; void init ( const int t ) { //\u9884\u5904\u7406\u51fa\u6765NTT\u91cc\u9700\u8981\u7684w\u548cwn\uff0c\u780d\u6389\u4e86\u4e00\u4e2alog\u7684\u65f6\u95f4 for ( int p = 1 ; p <= t ; ++ p ) { int buf1 = qpow ( G , ( mod - 1 ) / ( 1 << p )); int buf0 = qpow ( inv_G , ( mod - 1 ) / ( 1 << p )); deer [ 0 ][ p ][ 0 ] = deer [ 1 ][ p ][ 0 ] = 1 ; for ( int i = 1 ; i < ( 1 << p ); ++ i ) { deer [ 0 ][ p ][ i ] = 1l l * deer [ 0 ][ p ][ i - 1 ] * buf0 % mod ; //\u9006 deer [ 1 ][ p ][ i ] = 1l l * deer [ 1 ][ p ][ i - 1 ] * buf1 % mod ; } } inv [ 1 ] = 1 ; for ( int i = 2 ; i <= ( 1 << t ); ++ i ) inv [ i ] = 1l l * inv [ mod % i ] * ( mod - mod / i ) % mod ; } int NTT_init ( int n ) { //\u5feb\u901f\u6570\u8bba\u53d8\u6362\u9884\u5904\u7406 int limit = 1 , L = 0 ; while ( limit <= n ) limit <<= 1 , L ++ ; for ( int i = 0 ; i < limit ; ++ i ) RR [ i ] = ( RR [ i >> 1 ] >> 1 ) | (( i & 1 ) << ( L - 1 )); return limit ; } void NTT ( poly & A , int type , int limit ) { //\u5feb\u901f\u6570\u8bba\u53d8\u6362 A . resize ( limit ); for ( int i = 0 ; i < limit ; ++ i ) if ( i < RR [ i ]) swap ( A [ i ], A [ RR [ i ]]); for ( int mid = 2 , j = 1 ; mid <= limit ; mid <<= 1 , ++ j ) { int len = mid >> 1 ; for ( int pos = 0 ; pos < limit ; pos += mid ) { int * wn = deer [ type ][ j ]; for ( int i = pos ; i < pos + len ; ++ i , ++ wn ) { int tmp = 1l l * ( * wn ) * A [ i + len ] % mod ; A [ i + len ] = ck ( A [ i ] - tmp + mod ); A [ i ] = ck ( A [ i ] + tmp ); } } } if ( type == 0 ) { for ( int i = 0 ; i < limit ; ++ i ) A [ i ] = 1l l * A [ i ] * inv [ limit ] % mod ; } } poly poly_mul ( poly A , poly B ) { //\u591a\u9879\u5f0f\u4e58\u6cd5 int deg = A . size () + B . size () - 1 ; int limit = NTT_init ( deg ); poly C ( limit ); NTT ( A , 1 , limit ); NTT ( B , 1 , limit ); for ( int i = 0 ; i < limit ; ++ i ) C [ i ] = 1l l * A [ i ] * B [ i ] % mod ; NTT ( C , 0 , limit ); C . resize ( deg ); return C ; } poly poly_inv ( poly & f , int deg ) { //\u591a\u9879\u5f0f\u6c42\u9006 if ( deg == 1 ) return poly ( 1 , qpow ( f [ 0 ], mod - 2 )); poly A ( f . begin (), f . begin () + deg ); poly B = poly_inv ( f , ( deg + 1 ) >> 1 ); int limit = NTT_init ( deg << 1 ); NTT ( A , 1 , limit ), NTT ( B , 1 , limit ); for ( int i = 0 ; i < limit ; ++ i ) A [ i ] = B [ i ] * ( 2 - 1l l * A [ i ] * B [ i ] % mod + mod ) % mod ; NTT ( A , 0 , limit ); A . resize ( deg ); return A ; } poly poly_dev ( poly f ) { //\u591a\u9879\u5f0f\u6c42\u5bfc int n = f . size (); for ( int i = 1 ; i < n ; ++ i ) f [ i - 1 ] = 1l l * f [ i ] * i % mod ; return f . resize ( n - 1 ), f ; //f[0] = 0\uff0c\u8fd9\u91cc\u76f4\u63a5\u6254\u4e86,\u4ece1\u5f00\u59cb } poly poly_idev ( poly f ) { //\u591a\u9879\u5f0f\u6c42\u79ef\u5206 int n = f . size (); for ( int i = n - 1 ; i ; -- i ) f [ i ] = 1l l * f [ i - 1 ] * inv [ i ] % mod ; return f [ 0 ] = 0 , f ; } poly poly_ln ( poly f , int deg ) { //\u591a\u9879\u5f0f\u6c42\u5bf9\u6570 poly A = poly_idev ( poly_mul ( poly_dev ( f ), poly_inv ( f , deg ))); return A . resize ( deg ), A ; } poly poly_exp ( poly & f , int deg ) { //\u591a\u9879\u5f0f\u6c42\u6307\u6570 if ( deg == 1 ) return poly ( 1 , 1 ); poly B = poly_exp ( f , ( deg + 1 ) >> 1 ); B . resize ( deg ); poly lnB = poly_ln ( B , deg ); for ( int i = 0 ; i < deg ; ++ i ) lnB [ i ] = ck ( f [ i ] - lnB [ i ] + mod ); int limit = NTT_init ( deg << 1 ); //n -> n^2 NTT ( B , 1 , limit ), NTT ( lnB , 1 , limit ); for ( int i = 0 ; i < limit ; ++ i ) B [ i ] = 1l l * B [ i ] * ( 1 + lnB [ i ]) % mod ; NTT ( B , 0 , limit ); B . resize ( deg ); return B ; } poly poly_sqrt ( poly & f , int deg ) { //\u591a\u9879\u5f0f\u5f00\u65b9 if ( deg == 1 ) return poly ( 1 , 1 ); poly A ( f . begin (), f . begin () + deg ); poly B = poly_sqrt ( f , ( deg + 1 ) >> 1 ); poly IB = poly_inv ( B , deg ); int limit = NTT_init ( deg << 1 ); NTT ( A , 1 , limit ), NTT ( IB , 1 , limit ); for ( int i = 0 ; i < limit ; ++ i ) A [ i ] = 1l l * A [ i ] * IB [ i ] % mod ; NTT ( A , 0 , limit ); for ( int i = 0 ; i < deg ; ++ i ) A [ i ] = 1l l * ( A [ i ] + B [ i ]) * inv [ 2 ] % mod ; A . resize ( deg ); return A ; } poly poly_pow ( poly f , int k ) { //\u591a\u9879\u5f0f\u5feb\u901f\u5e42 f = poly_ln ( f , f . size ()); for ( auto & x : f ) x = 1l l * x * k % mod ; return poly_exp ( f , f . size ()); } poly poly_cos ( poly f , int deg ) { //\u591a\u9879\u5f0f\u4e09\u89d2\u51fd\u6570\uff08cos\uff09 poly A ( f . begin (), f . begin () + deg ); poly B ( deg ), C ( deg ); for ( int i = 0 ; i < deg ; ++ i ) A [ i ] = 1l l * A [ i ] * img % mod ; B = poly_exp ( A , deg ); C = poly_inv ( B , deg ); int inv2 = qpow ( 2 , mod - 2 ); for ( int i = 0 ; i < deg ; ++ i ) A [ i ] = 1l l * ( 1l l * B [ i ] + C [ i ]) % mod * inv2 % mod ; return A ; } poly poly_sin ( poly f , int deg ) { //\u591a\u9879\u5f0f\u4e09\u89d2\u51fd\u6570\uff08sin\uff09 poly A ( f . begin (), f . begin () + deg ); poly B ( deg ), C ( deg ); for ( int i = 0 ; i < deg ; ++ i ) A [ i ] = 1l l * A [ i ] * img % mod ; B = poly_exp ( A , deg ); C = poly_inv ( B , deg ); int inv2i = qpow ( img << 1 , mod - 2 ); for ( int i = 0 ; i < deg ; ++ i ) A [ i ] = 1l l * ( 1l l * B [ i ] - C [ i ] + mod ) % mod * inv2i % mod ; return A ; } poly poly_arcsin ( poly f , int deg ) { poly A ( f . size ()), B ( f . size ()), C ( f . size ()); A = poly_dev ( f ); B = poly_mul ( f , f ); for ( int i = 0 ; i < deg ; ++ i ) B [ i ] = minus ( mod , B [ i ]); B [ 0 ] = plus ( B [ 0 ], 1 ); C = poly_sqrt ( B , deg ); C = poly_inv ( C , deg ); C = poly_mul ( A , C ); C = poly_idev ( C ); return C ; } poly poly_arctan ( poly f , int deg ) { poly A ( f . size ()), B ( f . size ()), C ( f . size ()); A = poly_dev ( f ); B = poly_mul ( f , f ); B [ 0 ] = plus ( B [ 0 ], 1 ); C = poly_inv ( B , deg ); C = poly_mul ( A , C ); C = poly_idev ( C ); return C ; } poly multiply_all ( vector < poly > p ){ int len = p . size (); priority_queue < pii , vector < pii > , greater < pii > > q ; for ( int i = 0 ; i < len ; ++ i ) q . push ( mkp ( p [ i ]. size (), i )); for (; len > 1 ;){ auto u = q . top (); q . pop (); auto v = q . top (); q . pop (); -- len ; p [ v . se ] = poly_mul ( p [ u . se ], p [ v . se ]); q . push ( mkp ( p [ v . se ]. size (), v . se )); } return p [ q . top (). se ]; } } using Poly :: poly ; int n , K ; int cnt [ N ]; poly calc ( int n ){ if ( n == 1 ) return { 0 , 1 }; vector < poly > p ; for ( int i = 0 ; i < n ; ++ i ) p . pb ({ i , 1 }); return Poly :: multiply_all ( p ); /* \u4f3c\u4e4e\u5199 n=1 {1} else i=1~n-1,{1,i} \u7b2ci\u9879\u5c31\u662fs(n,n-i) */ } void solve (){ Poly :: init ( 19 ); int n = read (), K = read (); for ( int i = 1 ; i <= n ; ++ i ) ++ cnt [ read ()]; vector < poly > vec ; for ( int i = 1 ; i <= n ; ++ i ) if ( cnt [ i ]) vec . pb ( calc ( cnt [ i ])); poly ans = Poly :: multiply_all ( vec ); int fans = 0 ; for ( int i = 1 ; i < ( int ) ans . size (); ++ i ) if (( K - ( n - i )) % 2 == 0 && n - i <= K && n - i >= 0 ) fans = ( fans + ans [ i ]) % mod ; printf ( \"%d \\n \" , fans ); } signed main (){ for ( int cas = 1 ; cas -- ;){ solve (); } return 0 ; } \u5176\u4ed6\u9898\u76ee\u5176\u5b9e\u6ca1\u5565\u8bb2\u7684\uff0cE\u9898\u5199\u4e86\u4e2ast\u8868+\u4e8c\u5206\u641e\u8fc7\u53bb\u7684\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662fC\u9898dls\u7ed9\u4e86\u4e00\u4e2a\u770b\u4e0a\u53bb\u5f88\u5389\u5bb3\u7684\u4e1c\u897f\u53eb basic_string \u8fd9\u4e2a\u4e1c\u897f\u597d\u50cf\u662fstring\u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u4e00\u822cType\u662fchar\uff0c\u5b83\u7c7b\u4f3c\u4e00\u4e2a\u53ef\u62fc\u63a5\u7684vector\uff0c\u4e8e\u662f\u6211\u4eec\u6709\u4e86string\u91cc\u9762\u7684'+'\u64cd\u4f5c\u3002 \u4f46\u662f\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u7528\u5176\u4ed6\u7c7b\u578b\u6765\u66ff\u6362\uff0c\u6bd4\u5982\u8bf4int\uff0c\u4e8e\u662fC\u9898\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a int n ; basic_string < int > s ; void solve (){ int n = read (); s = { 1 }; for ( int i = 2 ; i <= n ; ++ i ){ s = s + basic_string < int > { i } + s ; } for ( auto v : s ) printf ( \"%d \" , v ); puts ( \"\" ); } \u7136\u540e\u8fd8\u53ef\u4ee5\u7528string\u91cc\u9762\u4f1a\u7528\u5230\u7684.find()\u4e4b\u7c7b\u7684\u51fd\u6570\u3002 \u4f3c\u4e4e\u8fd9\u4e2aType\u4e5f\u53ef\u4ee5\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u4f46\u662f\u9700\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\uff0c\u53ef\u60dc\u6211\u4e0d\u592a\u4f1a\uff0c\u770b\u961f\u53cb\u600e\u4e48\u586b\u4e2a\u5751\uff0c\u4ee5\u540evector\u5c31\u88ab\u6dd8\u6c70\u4e86\uff08bushi\uff09\u3002","title":"AtCoder Beginner Contest 247"},{"location":"contests/whu-2022-fresh/","text":"I \u5f02\u5ea6\u4e4b\u5203 \u957f\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(a\\) \uff0c\u6709 \\(m\\) \u7ec4\u8be2\u95ee\u3002\u6bcf\u6b21\u67e5\u8be2\u533a\u95f4 \\([l,r]\\) \u4e2d\uff0c\u6709\u591a\u5c11\u4e2a\u300c\u672c\u8d28\u4e0d\u540c\u300d\u7684\u300c\u8fde\u7eed\u4e0a\u5347\u300d\u7684\u5b50\u4e32\u3002 \\(n,m\\leq 10^6\\) \u6ce8\u610f\u5230\u591a\u7ec4\u67e5\u8be2\u4e14\u65e0\u4fee\u6539\uff0c\u8003\u8651\u5c06\u67e5\u8be2\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\u540e\uff0c\u79bb\u7ebf\u64cd\u4f5c\u3002 \u7531\u4e8e\u53f3\u7aef\u70b9\u4e0d\u65ad\u5411\u53f3\u79fb\u52a8\uff0c\u56e0\u6b64\u5bf9\u4e8e\u672c\u8d28\u76f8\u540c\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u5b58\u6700\u53f3\u4fa7\u7684\u5373\u53ef\u3002 \u8bb0 \\(f[i]\\) \u4e3a\u5de6\u7aef\u70b9\u4e3a \\(i\\) \u7684\u8fde\u7eed\u4e0a\u5347\u7684\u5b50\u4e32\u4e2a\u6570\uff08\u672c\u8d28\u76f8\u540c\u7684\u5b50\u4e32\u53ea\u5728\u6700\u53f3\u4fa7\u7684\u5de6\u7aef\u70b9\u5904\u88ab\u7edf\u8ba1\uff09\uff0c\u5219\u6bcf\u6b21\u67e5\u8be2\u7684\u7b54\u6848\u4e3a \\(\\sum\\limits_{i=l}^{r}{f[i]}\\) \u3002 \u79fb\u52a8\u53f3\u7aef\u70b9 \\(r\\) \uff0c\u8bb0 \\([l,r]\\) \u662f\u4ee5 \\(r\\) \u4e3a\u53f3\u7aef\u70b9\u4e14\u6700\u957f\u7684\u300c\u8fde\u7eed\u4e0a\u5347\u300d\u5b50\u4e32\uff0c\u5219\u7531\u4e8e \\(r\\) \u7684\u52a0\u5165\uff0c\u533a\u95f4 \\(f[l\\sim r]\\) \u90fd\u589e\u52a0 \\(1\\) \u3002 \u4e0b\u9762\u8003\u8651\u6d88\u9664\u5de6\u4fa7\u300c\u672c\u8d28\u76f8\u540c\u300d\u7684\u5b50\u4e32\u7684\u5f71\u54cd\uff0c\u663e\u7136\u8fd9\u4e9b\u300c\u672c\u8d28\u76f8\u540c\u300d\u7684\u5b50\u4e32\u7684\u672b\u5c3e\u5143\u7d20\u4e0e \\(a[r]\\) \u76f8\u540c\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u503c\u5f00\u4e00\u4e2a\u5355\u8c03\u6808\uff0c\u8bb0\u5f55\u4e09\u4e2a\u503c\uff1a \u5b83\u7684\u4f4d\u7f6e \\(rp\\) \u4ee5 \\(rp\\) \u4e3a\u53f3\u7aef\u70b9\u7684\u6700\u957f\u300c\u8fde\u7eed\u4e0a\u5347\u300d\u5b50\u4e32\u7684\u5de6\u7aef\u70b9 \\(la\\) \u5f53\u524d\u300c\u8fde\u7eed\u4e0a\u5347\u300d\u5b50\u4e32\u7684\u53f3\u7aef\u70b9 \\(ra\\) \u6ce8\u610f\u5230 \\([la,rp]\\) \u662f\u6700\u957f\u300c\u8fde\u7eed\u300d\u4e0a\u5347\u5b50\u4e32\uff0c\u800c \\([la,r]\\) \u662f\u5b83\u7684\u4e00\u4e2a\u524d\u7f00\u3002 \u6808\u662f\u5355\u8c03\u7684\uff0c\u81ea\u5e95\u5411\u4e0a \\(rp-la+1\\) \uff08\u5373\u6700\u5927\u5b50\u4e32\u957f\u5ea6\uff09\u4f9d\u6b21\u9012\u51cf\u3002 \u5355\u8c03\u9012\u51cf\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u5982\u679c\u53f3\u4fa7\u51fa\u73b0\u4e00\u4e2a\u957f\u5ea6\u66f4\u5927\u7684\u300c\u8fde\u7eed\u5b50\u4e32\u300d\uff0c\u5219\u9760\u5de6\u7684\u90a3\u4e9b\u5b50\u4e32\u90fd\u4f1a\u88ab\u5220\u53bb\uff08\u672c\u8d28\u76f8\u540c\u4e14\u66f4\u9760\u5de6\uff09\u3002\u53ea\u6709\u5f53\u66f4\u5de6\u4fa7\u7684\u5b50\u4e32\u957f\u5ea6\u66f4\u5927\u65f6\uff0c\u5b83\u6bd4\u53f3\u4fa7\u5b50\u4e32\u957f\u7684\u90a3\u90e8\u5206\u624d\u4f1a\u88ab\u4fdd\u7559\uff08\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u53f3\u4fa7\u7684\u90e8\u5206\u88ab\u5220\u9664\uff09\uff0c\u8fd9\u4e5f\u5c31\u662f\u7b2c\u4e09\u4e2a\u53d8\u91cf \\(ra\\) \u7684\u610f\u4e49\u3002 \u5bf9\u4e8e\u5f53\u524d\u5b50\u4e32 \\([l,r,r]\\) \uff0c\u5bf9\u4e8e\u5f53\u524d\u6808\u9876 \\([la,ra,rp]\\) \uff0c\u82e5 \\(rp-la\\leq r-l\\) \uff0c\u5219\u5f39\u51fa\u6808\u9876\uff0c\u540c\u65f6 \\(f[la\\sim ra]\\) \u51cf\u4e00\u3002 \u5426\u5219\uff0c\u8003\u8651\u5220\u53bb \\([la,ra,rp]\\) \u4e2d\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(r-l+1\\) \u7684\u90e8\u5206\uff0c\u5373 \\([rp-(r-l),rp]\\) \u3002\u4f46\u7531\u4e8e\u5b83\u6b64\u524d\u90e8\u5206\u540e\u7f00\u5df2\u7ecf\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u5b9e\u9645\u662f \\(f[rp-(r-l)\\sim ra]\\) \u51cf\u4e00\uff0c\u5e76\u66f4\u65b0 \\(ra\\) \u4e3a \\(rp-(r-l+1)\\) \u3002 \\(ra\\) \u5b9e\u9645\u4e0a\u5c31\u662f\u5f53\u524d\u5b50\u4e32\u4e2d\uff0c\u672a\u88ab\u5220\u9664\u7684\u5b9e\u9645\u53f3\u7aef\u70b9\u3002 \u6700\u540e\u5c06 \\([l,r,r]\\) \u63d2\u5165\u6808\u9876\u3002 \u533a\u95f4\u52a0\u6cd5\u548c\u6c42\u548c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002 \u590d\u6742\u5ea6 \\(O((n+m)\\log{n})\\) \u3002","title":"2022 \u6b66\u6c49\u5927\u5b66\u65b0\u751f\u8d5b"}]}